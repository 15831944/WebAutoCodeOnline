using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Management;
using System.Threading;

namespace Tangh.Demo.Remote.WinUI
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void btnExecute_Click(object sender, EventArgs e)
        {
            Thread thread = new Thread(new ThreadStart(() =>
            {
                this.Invoke(new Action<Button>(p => { p.Enabled = false; }), this.btnExecute);
                try
                {
                    string ip = this.txtIP.Text.Trim();
                    string name = this.txtName.Text.Trim();
                    string pwd = this.txtPwd.Text;
                    string fullPath = this.txtPath.Text.Trim();
                    string cmd = this.txtCMD.Text.Trim();

                    string result = RunCmdByWMI(cmd, fullPath, name, pwd, ip);

                    MessageBox.Show(result == string.Empty ? "成功！" : result);

                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.ToString());
                }
                finally
                {
                    this.Invoke(new Action<Button>(p => { p.Enabled = true; }), this.btnExecute);
                }
            }));

            thread.Start();
        }

        /// <summary>
        /// 通过WMI远程执行CMD指令
        /// </summary>
        /// <param name="command">指令</param>
        /// <returns>true:执行成功，false:执行失败</returns>
        public string RunCmdByWMI(string command, string runpath, string serverUid, string serverPwd, string serverIp)
        {
            int times = 0;
            try
            {
                ConnectionOptions connOption = new ConnectionOptions();
                connOption.Username = serverUid;
                connOption.Password = serverPwd;

                // 模拟级别，高级权限需要
                //connOption.Authentication = AuthenticationLevel.PacketPrivacy;
                //connOption.Impersonation = ImpersonationLevel.Impersonate;

                // ManagementPath 包装了生成和分析wmi对象的路径
                ManagementPath mngPath = new ManagementPath(string.Format(@"\\{0}\root\cimv2:Win32_Process", serverIp));
                ManagementScope scope = new ManagementScope(mngPath, connOption);
                try
                {
                    while (times < 3)
                    {
                        try
                        {
                            scope.Connect();
                            break;
                        }
                        catch
                        {
                            Thread.Sleep(500);
                            times++;
                            if (times == 3)
                            {
                                throw;
                            }
                        }
                    }
                    if (!scope.IsConnected)
                    {
                        return string.Format("与远程服务器：{0}建立连接失败！请检查账户密码是否正确。", serverIp);
                    }
                }
                catch (Exception ex)
                {
                    return ex.Message;
                }

                // ObjectGetOptions 类是指定用于获取管理对象的选项
                ObjectGetOptions objOption = new ObjectGetOptions();
                objOption.Timeout = new TimeSpan(50);

                // ManagementClass 是表示公共信息模型 (CIM) 管理类，通过该类的成员，可以使用特定的 WMI 类路径访问 WMI 数据
                using (ManagementClass classInstance = new ManagementClass(scope, mngPath, objOption))
                {
                    int ProcessId = 1;
                    // 调用执行命令的方法\
                    object[] cmdline = { "cmd  /c " + command, runpath, null, ProcessId };
                    int returnNumber = Convert.ToInt32(classInstance.InvokeMethod("Create", cmdline));
                    classInstance.Put();
                    switch (returnNumber)
                    {
                        case 0:
                            return string.Empty;
                        default:
                            return string.Format("远程服务器：{0}执行指令：“{1}”错误：Unknow Error", serverIp, command);
                    }
                }
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }
    }
}
