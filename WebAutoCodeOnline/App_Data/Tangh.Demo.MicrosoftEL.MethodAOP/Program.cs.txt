using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Practices.Unity.InterceptionExtension;
using System.Diagnostics;
using System.Reflection;
using Microsoft.Practices.EnterpriseLibrary.PolicyInjection;

namespace Tangh.Demo.MicrosoftEL.MethodAOP
{
    class Program
    {
        static void Main(string[] args)
        {
            IEmployee e = PolicyInjection.Create<Employee>("tanghao");

            e.DoWork();

            e.OverWork();

            Console.ReadLine();
        }
    }

    public class Employee : MarshalByRefObject, IEmployee
    {
        private string name = string.Empty;

        public Employee(string name)
        {
            this.name = name;
        }

        public void DoWork()
        {
            Console.WriteLine("开始进行工作了");
        }

        public void OverWork()
        {
            Console.WriteLine("完成工作了");
            throw new Exception("异常怎么办？");
        }
    }

    public interface IEmployee
    {
        [AutoLogCallHandler(Order = 2)]
        void DoWork();

        [AutoLogCallHandler(Order = 1)]
        void OverWork();
    }

    public class AutoLogCallHandlerAttribute : HandlerAttribute
    {
        public override ICallHandler CreateHandler(Microsoft.Practices.Unity.IUnityContainer container)
        {
            return new DoHandler() { Order = this.Order };
        }
    }

    public class DoHandler : ICallHandler
    {
        #region ICallHandler 成员

        public IMethodReturn Invoke(IMethodInvocation input, GetNextHandlerDelegate getNext)
        {
            StringBuilder sb = null;
            ParameterInfo pi = null;

            string methodName = input.MethodBase.Name;
            Console.WriteLine(string.Format("Enter method " + methodName));


            if (input.Arguments != null && input.Arguments.Count > 0)
            {
                sb = new StringBuilder();
                for (int i = 0; i < input.Arguments.Count; i++)
                {
                    pi = input.Arguments.GetParameterInfo(i);
                    sb.Append(pi.Name).Append(" : ").Append(input.Arguments[i]).AppendLine();
                }

                Console.WriteLine(sb.ToString());
            }


            Stopwatch sw = new Stopwatch();
            sw.Start();

            IMethodReturn result = getNext()(input, getNext);
            //如果发生异常则，result.Exception != null  
            if (result.Exception != null)
            {
                Console.WriteLine("Exception:" + result.Exception.Message);
                //必须将异常处理掉，否则无法继续执行  
                result.Exception = null;
            }

            sw.Stop();
            Console.WriteLine(string.Format("Exit method {0}, use {1}.", methodName, sw.Elapsed));

            return result;
        }

        public int Order
        {
            get;
            set;
        }

        #endregion
    }
}
